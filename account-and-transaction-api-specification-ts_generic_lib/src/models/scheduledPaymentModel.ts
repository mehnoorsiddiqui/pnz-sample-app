/**
 * Account and Transaction API SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema';
import { CreditorAccount5, creditorAccount5Schema } from './creditorAccount5';
import { CreditorAgent3, creditorAgent3Schema } from './creditorAgent3';
import {
  InstructedAmount12,
  instructedAmount12Schema,
} from './instructedAmount12';
import { Reference, referenceSchema } from './reference';
import {
  ScheduledTypeEnum,
  scheduledTypeEnumSchema,
} from './scheduledTypeEnum';

export interface ScheduledPaymentModel {
  /** A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner. */
  accountId: string;
  /** A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner. */
  scheduledPaymentId?: string;
  /**
   * The date on which the scheduled payment will be made.
   * All dates in the JSON payloads are represented in ISO 8601 date-time format.
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  scheduledPaymentDateTime: string;
  /** Specifies the scheduled payment date type requested */
  scheduledType: ScheduledTypeEnum;
  instructedAmount: InstructedAmount12;
  reference?: Reference;
  creditorAgent?: CreditorAgent3;
  creditorAccount?: CreditorAccount5;
}

export const scheduledPaymentModelSchema: Schema<ScheduledPaymentModel> = object(
  {
    accountId: ['AccountId', string()],
    scheduledPaymentId: ['ScheduledPaymentId', optional(string())],
    scheduledPaymentDateTime: ['ScheduledPaymentDateTime', string()],
    scheduledType: ['ScheduledType', scheduledTypeEnumSchema],
    instructedAmount: [
      'InstructedAmount',
      lazy(() => instructedAmount12Schema),
    ],
    reference: ['Reference', optional(lazy(() => referenceSchema))],
    creditorAgent: [
      'CreditorAgent',
      optional(lazy(() => creditorAgent3Schema)),
    ],
    creditorAccount: [
      'CreditorAccount',
      optional(lazy(() => creditorAccount5Schema)),
    ],
  }
);
