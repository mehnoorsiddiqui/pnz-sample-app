/**
 * Account and Transaction API SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GetAccountPartyResponse,
  getAccountPartyResponseSchema,
} from '../models/getAccountPartyResponse';
import {
  GetPartyResponse,
  getPartyResponseSchema,
} from '../models/getPartyResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';
import { ApiError } from '@apimatic/core';
import { AccountsParty400Error } from '../errors/accountsParty400Error';
import { AccountsParty403Error } from '../errors/accountsParty403Error';
import { AccountsParty500Error } from '../errors/accountsParty500Error';
import { AccountsParty503Error } from '../errors/accountsParty503Error';
import { Party400Error } from '../errors/party400Error';
import { Party403Error } from '../errors/party403Error';
import { Party500Error } from '../errors/party500Error';
import { Party503Error } from '../errors/party503Error';

export class PartyController extends BaseController {
  /**
   * Get Party related to an account
   *
   * @param accountId                  A unique identifier used to identify the account resource.
   * @param xFapiAuthDate              The time when the Customer last logged in with the Third Party. All
   *                                             dates in the HTTP headers are represented as RFC 7231 Full Dates. An
   *                                             example is below: Sun, 10 Sep 2017 19:43:31 UTC
   * @param xFapiCustomerIpAddress     The Customer's IP address if the Customer is currently logged in with
   *                                             the Third Party.
   * @param xFapiInteractionId         An RFC4122 UID used as a correlation id.
   * @param xMerchantIpAddress         The IP address of the merchant when making account information
   *                                             requests through a Third Party.
   * @param xCustomerUserAgent         The User-Agent of the application on the customer device that is used
   *                                             to make the account information request
   * @return Response from the API call
   */
  async getAccountParty(
    accountId: string,
    xFapiAuthDate?: string,
    xFapiCustomerIpAddress?: string,
    xFapiInteractionId?: string,
    xMerchantIpAddress?: string,
    xCustomerUserAgent?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GetAccountPartyResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      xFapiAuthDate: [xFapiAuthDate, optional(string())],
      xFapiCustomerIpAddress: [xFapiCustomerIpAddress, optional(string())],
      xFapiInteractionId: [xFapiInteractionId, optional(string())],
      xMerchantIpAddress: [xMerchantIpAddress, optional(string())],
      xCustomerUserAgent: [xCustomerUserAgent, optional(string())],
    });
    req.header('x-fapi-auth-date', mapped.xFapiAuthDate);
    req.header('x-fapi-customer-ip-address', mapped.xFapiCustomerIpAddress);
    req.header('x-fapi-interaction-id', mapped.xFapiInteractionId);
    req.header('x-merchant-ip-address', mapped.xMerchantIpAddress);
    req.header('x-customer-user-agent', mapped.xCustomerUserAgent);
    req.appendTemplatePath`/accounts/${mapped.accountId}/party`;
    req.throwOn(400, AccountsParty400Error, 'Bad Request');
    req.throwOn(401, ApiError, 'Unauthorized');
    req.throwOn(403, AccountsParty403Error, 'Forbidden');
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ApiError, 'Not Acceptable');
    req.throwOn(429, ApiError, 'Too Many Requests');
    req.throwOn(500, AccountsParty500Error, 'Internal Server Error');
    req.throwOn(501, ApiError, 'Not Implemented');
    req.throwOn(503, AccountsParty503Error, 'Service Unavailable');
    req.authenticate([{ httpBearer: true }]);
    return req.callAsJson(getAccountPartyResponseSchema, requestOptions);
  }

  /**
   * Get Party of logged in Customer
   *
   * @param xFapiAuthDate              The time when the Customer last logged in with the Third Party. All
   *                                             dates in the HTTP headers are represented as RFC 7231 Full Dates. An
   *                                             example is below: Sun, 10 Sep 2017 19:43:31 UTC
   * @param xFapiCustomerIpAddress     The Customer's IP address if the Customer is currently logged in with
   *                                             the Third Party.
   * @param xFapiInteractionId         An RFC4122 UID used as a correlation id.
   * @param xMerchantIpAddress         The IP address of the merchant when making account information
   *                                             requests through a Third Party.
   * @param xCustomerUserAgent         The User-Agent of the application on the customer device that is used
   *                                             to make the account information request
   * @return Response from the API call
   */
  async getParty(
    xFapiAuthDate?: string,
    xFapiCustomerIpAddress?: string,
    xFapiInteractionId?: string,
    xMerchantIpAddress?: string,
    xCustomerUserAgent?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GetPartyResponse>> {
    const req = this.createRequest('GET', '/party');
    const mapped = req.prepareArgs({
      xFapiAuthDate: [xFapiAuthDate, optional(string())],
      xFapiCustomerIpAddress: [xFapiCustomerIpAddress, optional(string())],
      xFapiInteractionId: [xFapiInteractionId, optional(string())],
      xMerchantIpAddress: [xMerchantIpAddress, optional(string())],
      xCustomerUserAgent: [xCustomerUserAgent, optional(string())],
    });
    req.header('x-fapi-auth-date', mapped.xFapiAuthDate);
    req.header('x-fapi-customer-ip-address', mapped.xFapiCustomerIpAddress);
    req.header('x-fapi-interaction-id', mapped.xFapiInteractionId);
    req.header('x-merchant-ip-address', mapped.xMerchantIpAddress);
    req.header('x-customer-user-agent', mapped.xCustomerUserAgent);
    req.throwOn(400, Party400Error, 'Bad Request');
    req.throwOn(401, ApiError, 'Unauthorized');
    req.throwOn(403, Party403Error, 'Forbidden');
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ApiError, 'Not Acceptable');
    req.throwOn(429, ApiError, 'Too Many Requests');
    req.throwOn(500, Party500Error, 'Internal Server Error');
    req.throwOn(501, ApiError, 'Not Implemented');
    req.throwOn(503, Party503Error, 'Service Unavailable');
    req.authenticate([{ httpBearer: true }]);
    return req.callAsJson(getPartyResponseSchema, requestOptions);
  }
}
