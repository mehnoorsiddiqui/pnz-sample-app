/**
 * Account information PNZ-API-CentreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AC1Initiateclientcredentialsgrant,
  aC1InitiateclientcredentialsgrantSchema,
} from '../models/aC1Initiateclientcredentialsgrant';
import {
  AC2Createaccountaccessconsent,
  aC2CreateaccountaccessconsentSchema,
} from '../models/aC2Createaccountaccessconsent';
import { contentTypeEnumSchema } from '../models/contentTypeEnum';
import { string } from '../schema';
import { BaseController } from './baseController';
import { v4 as uuidv4 } from 'uuid';
import { ClientAssertionJWT } from '../utils';

export class SetupAccountAccessConsentsResourceController extends BaseController {
  /**
   * This step initiates a client credentials grant request for accounts-related activity.
   *
   * A set of default configuration values are provided in the environment variables 'PNZ-API-Centre-V2-
   * Sandbox-V2' environment file so you can start trying the Sandbox APIs immediately.
   *
   * Once you've registered your own Application, you should change the PNZ-E-ClientId, PNZ-E-
   * ClientSecret, PNZ-E-KeyId, PNZ-E-PrivateKey, PNZ-E-RedirectURI, PNZ-E-PhoneNumber and PNZ-E-
   * AccountNumber environment variables to reflect details for your own Application. Doing this will
   * allow you to confirm your Application is set up correctly before you start developing.
   *
   * Preconditions:
   *
   * *   This step relies on the PNZ-E-ClientId, PNZ-E-KeyId and PNZ-E-PrivateKey environment variables.
   *
   *
   * Response:
   *
   * *   The response should be an access token of type Bearer.
   *
   *
   * Postconditions:
   *
   * *   The access token is saved in the environment variable PNZ-T-AC-AccountAccessToken in preparation
   * for Step AC2 - Create account access consent.
   *
   *
   * Examples:
   *
   * *   There is one example which shows the request and the expected response.
   *
   *
   * Troubleshooting:
   *
   * *   The most likely cause of errors is that the environment is not set to 'PNZ API Centre V2
   * Sandbox'.
   * *   Another likely cause is incorrect variable values. Confirm the precondition variable values are
   * correct.
   *
   * @param clientID
   * @param privateKey
   * @param KID
   * @return Response from the API call
   */
  async initiateClientCredentialsGrant(
    clientID: string,
    privateKey: string,
    KID: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AC1Initiateclientcredentialsgrant>> {
    const req = this.createRequest('POST', '/oauth/v2.0/token');
    req.baseUrl('server 1');
    const contentType = 'application/x-www-form-urlencoded';
    const grantType = 'client_credentials';
    const clientAssertionType =
      'urn:ietf:params:oauth:client-assertion-type:jwt-bearer';
    const scope = 'openid accounts';
    const payload: {
      sub: string;
      aud: string;
      iss: string;
      exp: number;
      iat: number;
      jti: string;
    } = {
      sub: clientID,
      aud: 'https://api-nomatls.apicentre.middleware.co.nz/oauth/v2.0/token',
      iss: clientID,
      exp: Math.floor(Date.now() / 1000) + 3599,
      iat: Math.floor(Date.now() / 1000) - 120,
      jti: uuidv4(),
    };
    const clientAssertion = ClientAssertionJWT(privateKey, KID, payload);
    const mapped = req.prepareArgs({
      contentType: [contentType, contentTypeEnumSchema],
      grantType: [grantType, string()],
      scope: [scope, string()],
      clientAssertion: [clientAssertion, string()],
      clientAssertionType: [clientAssertionType, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.form({
      grant_type: mapped.grantType,
      scope: mapped.scope,
      client_assertion: mapped.clientAssertion,
      client_assertion_type: mapped.clientAssertionType,
    });
    return req.callAsJson(
      aC1InitiateclientcredentialsgrantSchema,
      requestOptions
    );
  }

  /**
   * This step creates an account-access-consents resource.
   *
   * Preconditions:
   * + This step relies on the presence of an PNZ-T-AC-AccountAccessToken environment variable, which is
   * set upon successful completion of Step AC1 - Initiate client credentials grant.
   *
   * Response:
   * + The response should be an account-access-consents object, with a status 'AwaitingAuthorisation'.
   *
   * Postconditions:
   * + The PNZ-T-AC-AccountAccessConsentId is saved in an environment variable in preparation for steps:
   * HF-AC3 - Initiate authorization code grant for an account access consent; DF-AC3 - Initiation back
   * channel authorisation request; and AC9 - Check account access consent status.
   *
   * Examples:
   * + There is one example which shows the request and the expected response.
   *
   * Troubleshooting:
   * + The most likely cause of errors is that the step is being attempted out of sequence. Be sure to
   * follow the steps in sequence
   * + Another likely cause of errors are out of date variable values. Try starting from Step AC1 -
   * Initiate client credentials grant again.
   *
   * @param authorization
   * @return Response from the API call
   */
  async createAccountAccessConsent(
    authorization: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AC2Createaccountaccessconsent>> {
    const req = this.createRequest(
      'POST',
      '/open-banking-nz/v2.3/account-access-consents'
    );
    req.baseUrl('server 1');
    const accept = 'application/json';
    let date: Date = new Date();
    date.setDate(date.getDate() + 2);
    let datestring = '"' + date.toISOString() + '"';
    const body: string = `{
      "Data": {
          "Consent": {
              "TransactionToDateTime": "2025-05-08T00:00:00-00:00",
              "ExpirationDateTime": ${datestring},
              "Permissions": [
                  "ReadAccountsDetail",
                  "ReadBalances",
                  "ReadBeneficiariesDetail",
                  "ReadDirectDebits",
                  "ReadParty",
                  "ReadPartyAuthUser",
                  "ReadOffers",
                  "ReadScheduledPaymentsDetail",
                  "ReadStandingOrdersDetail",
                  "ReadStatementsBasic",
                  "ReadStatementsDetail",
                  "ReadTransactionsDetail",
                  "ReadTransactionsCredits",
                  "ReadTransactionsDebits"
              ],
              "TransactionFromDateTime": "2012-05-03T00:00:00-00:00"
          }
      },
      "Risk": {
          "EndUserAppName": "This is an app name that is long",
          "EndUserAppVersion": "App Version3.0",
          "PaymentContextCode": "EcommerceServices",
          "MerchantName": "This is a merchant name that is long",
          "MerchantNZBN": "This is an NZBN number",
          "MerchantCategoryCode": "5967",
          "MerchantCustomerIdentification": "This is a special customer identifier",
          "GeoLocation": {
              "Latitude": "45.516136",
              "Longitude": "-73.656830"
          },
          "DeliveryAddress": {
              "AddressLine": [
                  "This is address line 1"
              ],
              "StreetName": "Main Street",
              "BuildingNumber": "12345",
              "PostCode": "12345",
              "TownName": "Some Town",
              "CountrySubDivision": "Some Subdivision",
              "Country": "CA"
          }
      }
  }`;
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      body: [body, string()],
      authorization: [authorization, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', 'application/json');
    req.header('authorization', mapped.authorization);
    req.text(mapped.body);
    return req.callAsJson(aC2CreateaccountaccessconsentSchema, requestOptions);
  }
}
